runApp()
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
import numpy as np
reticulate::repl_python()
import pandas as pd
import numpy as np
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
library(DT)
library(DT)
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
library(ggplot2)
# objective function
fun <- function(x) {
x^2
}
# initialize iterations
k <- 0
# initial guess
x <- 5
# gradient at point x
grad <- 2 * x
# search direction
p <- -grad
points <- c()
points[1] <- x
i <- 2
while (norm(grad, "2") > 10^-4) {
# solve for alpha
alpha <- solve(p, -x)
# gradient at x
grad <- 2 * x
# search direction
p <- -grad
# update x
x <- x + alpha * p
# all x
points[i] <- x
# iterations
k <- k + 1
i <- i + 1
}
data_points <- data.frame(x = points, y = fun(points))
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = fun) +
geom_line(data = data_points, aes(x = x, y = y), col = "blue") +
geom_point(data = data_points, aes(x = x, y = y), col = "red") +
theme_minimal() +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 18)
) +
ylab(expression(x^2)) +
ggtitle(bquote(atop("Gradient Descent for" ~ x^2, "With Exact Step Length and k = 2")))
while (norm(grad, "2") > 10^-4) {
print(alpha)
# solve for alpha
alpha <- solve(p, -x)
# gradient at x
grad <- 2 * x
# search direction
p <- -grad
# update x
x <- x + alpha * p
# all x
points[i] <- x
# iterations
k <- k + 1
i <- i + 1
}
data_points <- data.frame(x = points, y = fun(points))
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = fun) +
geom_line(data = data_points, aes(x = x, y = y), col = "blue") +
geom_point(data = data_points, aes(x = x, y = y), col = "red") +
theme_minimal() +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 18)
) +
ylab(expression(x^2)) +
ggtitle(bquote(atop("Gradient Descent for" ~ x^2, "With Exact Step Length and k = 2")))
# objective function
fun <- function(x) {
x^2
}
# initialize iterations
k <- 0
# initial guess
x <- 5
# gradient at point x
grad <- 2 * x
# search direction
p <- -grad
points <- c()
points[1] <- x
i <- 2
while (norm(grad, "2") > 10^-4) {
print(alpha)
# solve for alpha
alpha <- solve(p, -x)
# gradient at x
grad <- 2 * x
# search direction
p <- -grad
# update x
x <- x + alpha * p
# all x
points[i] <- x
# iterations
k <- k + 1
i <- i + 1
}
solve(-10,-5)
solve(-4,-5)
solve(-19,-5)
help(solve)
solve(1,1)
solve(1,10)
solve(2,10)
solve(1,10)
solve(-10,-10)
solve(10,-10)
solve(5,-10)
solve(-5,-10)
solve(-10,-5)
solve(-10,50)
solve(-10,50)
solve(-5,50)
solve(5,50)
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp()
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
library(ggplot2)
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp('C:/Users/senpai/Desktop/ShinyApp/basicUI')
runApp('C:/Users/senpai/Desktop/ShinyApp/basicUI')
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp()
runApp()
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#slider 1
output$slider1<-renderText({
paste0(c('Output slider input: ',input$slider1),collapse = '')
})
#slider 2 range
output$slider2<-renderText({
paste0(c('Output slider input range: ',input$slider2),collapse = ' ')
})
#simple select
output$select<-renderText({
input$select
})
#simple select multiple
output$select2<-renderText({
paste0(c('Selecciones del ui: ',input$select2), collapse = ' ')
})
#date input
output$date<-renderText({
paste0(c('fecha: ',as.character(input$date)), collapse = '')
})
#date range
output$dates<-renderText({
paste0(c('fechas: ',as.character(input$dates)), collapse = ' ')
})
#numeric input
output$num_input<-renderText({
paste0(c('numero: ',input$num_input), collapse = ' ')
})
#checkbox input
output$checkbox<-renderText({
paste0(c('valor: ',input$checkbox), collapse = ' ')
})
#check group
output$checkGroup<-renderText({
paste0(c('valor: ',input$checkGroup), collapse = ' ')
})
#input text
output$text<-renderText({
input$text
})
#input text area
output$textArea<-renderText({
input$textArea
})
#action button
output$actionButton<-renderText({
input$actionButton
})
#action link
output$actionLink<-renderText({
input$actionLink
})
})
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/files')
runApp('C:/Users/senpai/Desktop/ShinyApp/files')
library(shiny)
library(DT)
library(ggplot2)
library(dplyr)
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/files')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
runApp()
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/plots')
library(shiny)
library(ggplot2)
library(dplyr)
out_click<- NULL
out_hover<-NULL
shinyServer(function(input, output) {
output$grafica_base_r <- renderPlot({
plot(mtcars$wt,mtcars$mpg,xlab="wt",ylab="Miler per Galon")
})
output$grafica_ggplot <- renderPlot({
diamonds %>%
ggplot(aes(x=carat,y=price, color=color))+
geom_point()+
ylab("Precio")+
xlab("Kilates")+
ggtitle("Precio diamantes")
})
output$click_base_plot <- renderPlot({
plot(mtcars$wt,mtcars$mpg,xlab="wt",ylab="Miler per Galon")
})
output$click_base_plot_xy <- renderPrint({
c(input$plot_click$x, input$plot_click$y)
})
output$click_ggplot <- renderPlot({
diamonds %>%
ggplot(aes(x=carat,y=price, color=color))+
geom_point()+
ylab("Precio")+
xlab("Kilates")+
ggtitle("Precio diamantes")
})
output$ggplot_click_xy <- renderPrint({
c(input$ggplot_click$x, input$ggplot_click$y)
})
output$plot_click_option <- renderPlot({
plot(mtcars$wt,mtcars$mpg,xlab="wt",ylab="Miler per Galon")
})
output$all_click_options <- renderPrint({
if(!is.null(input$clk$x)){
click <- paste0(c('(',round(input$clk$x,2),',',round(input$clk$y,2),')'),collapse = '')
click <- paste0("Coordenada del click : ", click,collapse='')
} else {click<-NULL}
if(!is.null(input$dblclick$x)){
dblclick <- paste0(c('(',round(input$dblclick$x,2),',',round(input$dblclick$y,2),')'),collapse = '')
dblclick <- paste0("Coordenada del doble click : ", dblclick,collapse='')
} else{dblclick<-NULL}
if(!is.null(input$hover$x)){
hover <- paste0(c('(',round(input$hover$x,2),',',round(input$hover$y,2),')'),collapse = '')
hover <- paste0("Coordenada del cursor : ", hover,collapse='')
} else {hover=NULL}
if(!is.null(input$brush$xmin)){
brushx <- paste0(c('(',round(input$brush$xmin,2),',',round(input$brush$xmax,2),')'),collapse = '')
brushy <- paste0(c('(',round(input$brush$ymin,2),',',round(input$brush$ymax,2),')'),collapse = '')
brush <- cat('\t rango en x: ', brushx,'\n','\t rango en y: ', brushy)
} else {brush<-NULL}
cat( click,dblclick,hover,brush,sep = "\n" )
})
puntos <- reactive({
if(!is.null(input$click_plot_tarea$x)){
df<-nearPoints(mtcars,input$click_plot_tarea,xvar='wt',yvar='mpg')
out <- df %>%
select(wt,mpg)
out_click <<- rbind(out_click,out) %>% distinct()
return(out)
}
if(!is.null(input$hover_plot_tarea$x)){
df<-nearPoints(mtcars,input$hover_plot_tarea,xvar='wt',yvar='mpg')
out <- df %>%
select(wt,mpg)
out_hover <<- out
return(out_hover)
}
if(!is.null(input$dblclck_plot_tarea$x)){
df<-nearPoints(mtcars,input$dblclck_plot_tarea,xvar='wt',yvar='mpg')
out <- df %>%
select(wt,mpg)
out_click <<- setdiff(out_click,out)
return(out_hover)
}
if(!is.null(input$brush_plot_tarea)){
df<-brushedPoints(mtcars,input$brush_plot_tarea,xvar='wt',yvar='mpg')
out <- df %>%
select(wt,mpg)
out_click <<- rbind(out_click,out) %>% dplyr::distinct()
return(out_hover)
}
})
mtcars_plot <- reactive({
plot(mtcars$wt,mtcars$mpg,xlab="wt",ylab="Miles per Galon")
puntos <-puntos()
if(!is.null(out_hover)){
points(out_hover[,1],out_hover[,2],
col='gray',
pch=16,
cex=2)}
if(!is.null(out_click)){
points(out_click[,1],out_click[,2],
col='green',
pch=16,
cex=2)}
})
output$plot_tarea <- renderPlot({
mtcars_plot()
})
click_table <- reactive({
input$click_plot_tarea$x
input$dblclck_plot_tarea$x
input$brush_plot_tarea
out_click
})
output$tarea_dt <- DT::renderDataTable({
click_table() %>% DT::datatable()
})
})
runApp('../plots_tarea4')
runApp('C:/Users/senpai/Desktop/ShinyApp/plots_tarea4')
runApp()
runApp('C:/Users/senpai/Desktop/ShinyApp/plots_tarea4')
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/ShinyApp/plots_tarea4')
runApp('C:/Users/senpai/Desktop/ShinyApp/plots_tarea4')
library(ggplot2)
library(dplyr)
out_click = NULL
out_hover = NULL
runApp('C:/Users/senpai/Desktop/ShinyApp/plots')
runApp('C:/Users/senpai/Desktop/ShinyApp/plots')
runApp('../plots_tarea4')
runApp('C:/Users/senpai/Desktop/ShinyApp/plots_tarea4')
data1 = read.csv('files/academatica_video_stats.csv')
data1
data2 = read.csv('files/academatica_videos.csv')
data3 = read.csv('files/academatica_video_metadata.csv')
data1 = read.csv('files/academatica_video_stats.csv')
data2 = read.csv('files/academatica_videos.csv')
data3 = read.csv('files/academatica_video_metadata.csv')
data3 = read.csv('files/academatica_videos_metadata.csv')
data1.head
data1.head()
data1
data2
data3
data3.describe
data3.describe()
describe(data3)
data3.summary
summary(data3)
summary(data3)
data3
data3['id'=IZliv4xo67c]
data3['id'='IZliv4xo67c']
data1
data1
data1
summary(data1)
summary.length
length(data1)
length(data2)
length(data3)
length(data3)
summary(data1)
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/primer_parcial')
install.packages("DBI")
install.packages("dbplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(DBI)
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "academica_db",
host = "127.0.0.1",
username = "root",
password = "")
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "academica_db",
host = "127.0.0.1",
username = "root",
password = "")
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "academica_db",
host = "127.0.0.1",
username = "root",
password = "")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
install.packages("RMySQL")
install.packages("pool")
library(pool)
library(pool)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "academica_db",
host = "127.0.0.1",
username = "root",
password = "")
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "academatica_db",
host = "127.0.0.1",
username = "root",
password = "")
dbGetQuery(conn, "SELECT * FROM videos LIMIT 5;")
type(dbGetQuery(conn, "SELECT * FROM videos LIMIT 5;"))
dbGetQuery(conn, "SELECT * FROM videos LIMIT 5;")
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/primer_parcial')
install.packages("markdown")
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
library(shinydashboard)
library(shinydashboard)
library(shinydashboard)
dbGetQuery(conn, "SELECT * FROM videos LIMIT 5;")
runApp()
data = dbGetQuery(conn, "SELECT * FROM videos")
cars
output$plot <- renderPlot({
plot(cars, type=input$plotType)
})
cars
c = cars
c
summary(c)
c = cars
summary(c)
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$plot <- renderPlot({
plot(cars, type=input$plotType)
})
output$summary <- renderPrint({
summary(data)
})
output$table <- DT::renderDataTable({
DT::datatable(cars)
})
})
library(shinydashboard)
runApp()
length(data)
print(length(data))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
