SI = rep(NA,length(arr))
indice = k-1
for (i in (1:length(arr))) {
if(i <= (length(arr) - k+1)){
bloque = mean(arr[seq(i,i+(k-1))])
MM[indice]=bloque
SI[indice]=arr[indice]/bloque
indice = indice+1
}
dfOut = data.frame(df,MM=MM,SI=SI)
}
dfOunt
dfOut = data.frame(df,MM=MM,SI=SI)
for (i in (1:length(arr))) {
if(i <= (length(arr) - k+1)){
bloque = mean(arr[seq(i,i+(k-1))])
MM[indice]=bloque
SI[indice]=arr[indice]/bloque
indice = indice+1
}
dfOut = data.frame(df,MM=MM,SI=SI)
}
k=4
df = datos
Y=2
arr = df[,Y]
MM = rep(NA, length(arr))
SI = rep(NA,length(arr))
indice = k-1
for (i in (1:length(arr))) {
if(i <= (length(arr) - k+1)){
bloque = mean(arr[seq(i,i+(k-1))])
MM[indice]=bloque
SI[indice]=arr[indice]/bloque
indice = indice+1
}
dfOut = data.frame(df,MM=MM,SI=SI)
}
dfOunt
k=4
df = datos
Y=2
arr = df[,Y]
MM = rep(NA, length(arr))
SI = rep(NA,length(arr))
indice = k-1
for (i in (1:length(arr))) {
if(i <= (length(arr) - k+1)){
bloque = mean(arr[seq(i,i+(k-1))])
MM[indice]=bloque
SI[indice]=arr[indice]/bloque
indice = indice+1
}
}
dfOut = data.frame(df,MM=MM,SI=SI)
#Estacionalidad
for (j in c(1:k)) {
varX = seq(j,length(arr),by=k)
varY = c(varY,mean(dfOut[varX,4],na.rm=TRUE))
}
dfOut = data.frame(dfOut, S=rep(VarY,k))
dfOut
k=4
df = datos
Y=2
arr = df[,Y]
MM = rep(NA, length(arr))
SI = rep(NA,length(arr))
indice = k-1
for (i in (1:length(arr))) {
if(i <= (length(arr) - k+1)){
bloque = mean(arr[seq(i,i+(k-1))])
MM[indice]=bloque
SI[indice]=arr[indice]/bloque
indice = indice+1
}
}
dfOut = data.frame(df,MM=MM,SI=SI)
for (j in c(1:k)) {
varX = seq(j,length(arr),by=k)
varY = c(varY,mean(dfOut[varX,4],na.rm=TRUE))
}
#Estacionalidad
varY = c()
for (j in c(1:k)) {
varX = seq(j,length(arr),by=k)
varY = c(varY,mean(dfOut[varX,4],na.rm=TRUE))
}
dfOut = data.frame(dfOut, S=rep(VarY,k))
dfOut = data.frame(dfOut, S=rep(varY,k))
dfOut
shiny::runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
install.packages("DT")
#Render Diferncias Finitas
output$tblFinite<-DT::renderDataTable({
DT::datatable(finiteDiffCalculate(), options = list(paging = TRUE))
})
library(DT)
library(DT)
install.packages("DT")
library(DT)
library(DT)
install.packages("DT")
library(DT)
library(DT)
shiny::runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
#Render Diferncias Finitas
output$tblFinite<-renderTable({
finiteDiffCalculate()
})
reticulate::repl_python()
def finiteDifference(f,x0,h):
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
runApp()
shiny::runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
#Evento y evaluaciÃ³n de metodo de diferencias finitas
finiteDiffCalculate<-eventReactive(input$nwtFinite, {
func = input$fec[1]
x0 = as.double(input$fxval[1])
h = as.double(input$fh[1])
print(h)
outs = finiteDifference(func, x0, h)
outs
})
#Evento y evaluaciÃ³n de metodo de diferencias finitas
finiteDiffCalculate<-eventReactive(input$nwtFinite, {
func = input$fec[1]
x0 = as.double(input$fxval[1])
h = as.double(input$fh[1])
outs = finiteDifference(func, x0, h)
print(outs)
outs
})
#Evento y evaluaciÃ³n de metodo de diferencias finitas
finiteDiffCalculate<-eventReactive(input$nwtFinite, {
func = input$fec[1]
x0 = as.double(input$fxval[1])
h = as.double(input$fh[1])
outs = finiteDifference(func, x0, h)
outs
})
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
import newton_method as nm
reticulate::repl_python()
import finite_difference as fd
import newton_method as nm
import pandas
import re
import finite_difference as fd
import newton_method as nm
quit
shiny::runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
runApp()
source_python("algoritmos.py")
library(shiny)
library(reticulate)
source_python("algoritmos.py")
runApp('C:/Users/senpai/Desktop/Proyecto ACD/demo1')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
import numpy as np
reticulate::repl_python()
import pandas as pd
import numpy as np
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
library(DT)
library(DT)
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
library(ggplot2)
# objective function
fun <- function(x) {
x^2
}
# initialize iterations
k <- 0
# initial guess
x <- 5
# gradient at point x
grad <- 2 * x
# search direction
p <- -grad
points <- c()
points[1] <- x
i <- 2
while (norm(grad, "2") > 10^-4) {
# solve for alpha
alpha <- solve(p, -x)
# gradient at x
grad <- 2 * x
# search direction
p <- -grad
# update x
x <- x + alpha * p
# all x
points[i] <- x
# iterations
k <- k + 1
i <- i + 1
}
data_points <- data.frame(x = points, y = fun(points))
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = fun) +
geom_line(data = data_points, aes(x = x, y = y), col = "blue") +
geom_point(data = data_points, aes(x = x, y = y), col = "red") +
theme_minimal() +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 18)
) +
ylab(expression(x^2)) +
ggtitle(bquote(atop("Gradient Descent for" ~ x^2, "With Exact Step Length and k = 2")))
while (norm(grad, "2") > 10^-4) {
print(alpha)
# solve for alpha
alpha <- solve(p, -x)
# gradient at x
grad <- 2 * x
# search direction
p <- -grad
# update x
x <- x + alpha * p
# all x
points[i] <- x
# iterations
k <- k + 1
i <- i + 1
}
data_points <- data.frame(x = points, y = fun(points))
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = fun) +
geom_line(data = data_points, aes(x = x, y = y), col = "blue") +
geom_point(data = data_points, aes(x = x, y = y), col = "red") +
theme_minimal() +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 15),
plot.title = element_text(hjust = 0.5, size = 18)
) +
ylab(expression(x^2)) +
ggtitle(bquote(atop("Gradient Descent for" ~ x^2, "With Exact Step Length and k = 2")))
# objective function
fun <- function(x) {
x^2
}
# initialize iterations
k <- 0
# initial guess
x <- 5
# gradient at point x
grad <- 2 * x
# search direction
p <- -grad
points <- c()
points[1] <- x
i <- 2
while (norm(grad, "2") > 10^-4) {
print(alpha)
# solve for alpha
alpha <- solve(p, -x)
# gradient at x
grad <- 2 * x
# search direction
p <- -grad
# update x
x <- x + alpha * p
# all x
points[i] <- x
# iterations
k <- k + 1
i <- i + 1
}
solve(-10,-5)
solve(-4,-5)
solve(-19,-5)
help(solve)
solve(1,1)
solve(1,10)
solve(2,10)
solve(1,10)
solve(-10,-10)
solve(10,-10)
solve(5,-10)
solve(-5,-10)
solve(-10,-5)
solve(-10,50)
solve(-10,50)
solve(-5,50)
solve(5,50)
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
runApp()
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
library(ggplot2)
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/kaggle/Proyecto ACD/main')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp('C:/Users/senpai/Desktop/ShinyApp/basicUI')
runApp('C:/Users/senpai/Desktop/ShinyApp/basicUI')
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
runApp()
runApp()
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#slider 1
output$slider1<-renderText({
paste0(c('Output slider input: ',input$slider1),collapse = '')
})
#slider 2 range
output$slider2<-renderText({
paste0(c('Output slider input range: ',input$slider2),collapse = ' ')
})
#simple select
output$select<-renderText({
input$select
})
#simple select multiple
output$select2<-renderText({
paste0(c('Selecciones del ui: ',input$select2), collapse = ' ')
})
#date input
output$date<-renderText({
paste0(c('fecha: ',as.character(input$date)), collapse = '')
})
#date range
output$dates<-renderText({
paste0(c('fechas: ',as.character(input$dates)), collapse = ' ')
})
#numeric input
output$num_input<-renderText({
paste0(c('numero: ',input$num_input), collapse = ' ')
})
#checkbox input
output$checkbox<-renderText({
paste0(c('valor: ',input$checkbox), collapse = ' ')
})
#check group
output$checkGroup<-renderText({
paste0(c('valor: ',input$checkGroup), collapse = ' ')
})
#input text
output$text<-renderText({
input$text
})
#input text area
output$textArea<-renderText({
input$textArea
})
#action button
output$actionButton<-renderText({
input$actionButton
})
#action link
output$actionLink<-renderText({
input$actionLink
})
})
runApp('C:/Users/senpai/Desktop/ShinyApp/best_shiny')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/files')
runApp('C:/Users/senpai/Desktop/ShinyApp/files')
library(shiny)
library(DT)
library(ggplot2)
library(dplyr)
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/files')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
runApp()
runApp()
runApp()
runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
runApp('C:/Users/senpai/Desktop/ShinyApp/shiny_class4')
shiny::runApp('C:/Users/senpai/Desktop/ShinyApp/url_parameters')
session$clientData$url_port
session$clientData$url_pathname
session$clientData$url_search
runApp('C:/Users/senpai/Desktop/ShinyApp/url_parameters')
install.packages("plumber")
library(plumber)
library(plumber)
r$run(port=8001)
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
r = plumb("Ejercicio1.R")
library(plumber)
r = plumb("Ejercicio1.R")
library(plumber)
r = plumb("Ejercicio1.R")
library(plumber)
r = plumb("Ejercicio1.R")
setwd("C:/Users/senpai/Desktop/ShinyApp/apis/ejercicio1")
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
r$run(port=8001)
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
function(msg=""){
list(msg = paste0("El mensaje es: ", msg) )
}
#' Graficar un histograma
#' @serializer png
#' @get /plot
function(){
rand <- rnorm(100)
hist(rand)
}
#' Graficar un histograma
#' @serializer png
#' @get /plot
function(){
rand <- rnorm(100)
hist(rand)
}
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
function(a,b){
list(
a=a,
b=b,
output=suma(as.numeric(a),as.numeric(b))
)
}
function(a,b){
list(
a=a,
b=b,
output=suma(as.numeric(a),as.numeric(b))
)
}
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
library(plumber)
function(msg=""){
list(msg = paste0("El mensaje es: ", msg) )
}
#' Graficar un histograma
#' @serializer png
#' @get /plot
function(){
rand <- rnorm(100)
hist(rand)
}
function(a,b){
list(
a=a,
b=b,
output=suma(as.numeric(a),as.numeric(b))
)
}
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
source('C:/Users/senpai/Desktop/ShinyApp/apis/ejercicio1/Main.R')
source('C:/Users/senpai/Desktop/ShinyApp/apis/ejercicio1/Main.R')
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
library(plumber)
r = plumb("Ejercicio1.R")
r$run(port=8001)
r$run(port=8001)
suma = function(a,b){
return(a + b)
}
r$run(port=8001)
